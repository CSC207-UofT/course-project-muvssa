package com.example.fitappa.Model.Entity;

import android.os.Build;
import com.example.fitappa.Model.UseCase.Routine;

import java.io.Serializable;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

public class Workout implements Serializable {
    private String name;
    private String description;
    private List<Exercise> exercises;
    private LocalDateTime startTime;
    private LocalDateTime endTime;

    /**
     * Constructor for a workout class, takes in all necessary variables needed for a workout
     *
     * @param name        The String name referring to the name of the workout
     * @param description The String represents the description of the workout
     */
    public Workout(String name, String description) {
        this.name = name;
        this.description = description;
        this.exercises = new ArrayList<>();
    }

    // Constructor necessary for Firebase
    public Workout() {
    }

    /**
     * Creates a workout given another workout, other.
     *
     * @param other - another workout
     */
    public Workout(Workout other) {
        this.name = other.name;
        this.description = other.description;
        this.startTime = null;
        this.endTime = null;

        for (Exercise exercise : other.exercises) {
            // inefficient code, fix it later :)
            Exercise e;

            if (exercise instanceof WeightedRepExercise) {
                e = new WeightedRepExercise((WeightedRepExercise) exercise);
            } else if (exercise instanceof RepExercise) {
                e = new RepExercise((RepExercise) exercise);
            } else if (exercise instanceof TimedExercise) {
                e = new TimedExercise((TimedExercise) exercise);
            } else {
                // ignore this for now, it's a workaround. We will have an entirely different approach later.
                e = new RepExercise("Empty Exercise");
            }

            this.exercises.add(e);
        }
    }

    /**
     * A getter method
     * returns the name of the workout
     *
     * @return the string name
     */
    public String getName() {
        return name;
    }

    /**
     * Change the workouts name
     *
     * @param name new name for workout
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * returns when the workout is started
     *
     * @return the LocalDateTime for the start time
     */
    public LocalDateTime getStartTime() {
        return startTime;
    }

    /**
     * Change the start time of the workout
     *
     * @param startTime new start time for workout
     */
    public void setStartTime(LocalDateTime startTime) {
        this.startTime = startTime;
    }

    /**
     * returns when the workout has ended
     *
     * @return the LocalDateTime for the end time
     */
    public LocalDateTime getEndTime() {
        return endTime;
    }

    /**
     * Change the end time of the workout
     *
     * @param endTime new end time for workout
     */
    public void setEndTime(LocalDateTime endTime) {
        this.endTime = endTime;
    }

    /**
     * returns the description of the workout
     *
     * @return the String for the description
     */
    public String getDescription() {
        return description;
    }

    /**
     * Change the workouts description
     *
     * @param description new description for workout
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Gets the exercises for this workout
     *
     * @return list of exercises for this workout
     */
    public List<Exercise> getExercises() {
        return exercises;
    }

    /**
     * A method used to add exercises
     *
     * @param exercise new exercise to be added to workout
     */
    public void addExercise(Exercise exercise) {
        this.exercises.add(exercise);
    }

    /**
     * @return The volume generated by all exercises performed in this workout
     */
    public double getTotalVolume() {
        double volume = 0;

        for (Exercise exercise : this.exercises) {
            volume += exercise.getVolume();
        }

        return volume;
    }

    /**
     * A workout's duration is defined to be the total time elapsed between the start and end of the workout.
     *
     * @return The workout's duration
     */
    public Duration getDuration() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            return Duration.between(this.startTime, this.endTime);
        } else {
            return null; // TODO: Increase Min API Level from 16 to 24
        }
    }
    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;
        if (!(o instanceof Workout))
            return false;
        Workout workout = (Workout) o;
        // erroring as when you want to update a specfic routine it could have diffrent workouts
        //return name.equals(routine.name) && description.equals(routine.description) &&
        //        workouts.equals(routine.workouts);
        return name.equals(workout.getName());
    }


}

