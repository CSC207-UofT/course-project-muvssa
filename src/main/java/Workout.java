import java.sql.Array;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.Period;
import java.util.ArrayList;

public class Workout {
    public String name;
    public String description;
    public ArrayList<Exercise> exercises;
    public LocalDateTime startTime;
    public LocalDateTime endTime;
    /**
     * Constructor for a workout class, takes in all nececcary variables needed for a workout
     * @param name The String name referring to the name of the workout
     * @param description The String repressants the description of the workout
     */
    public Workout(String name, String description) {
        this.name = name;
        this.description = description;
        this.exercises = new ArrayList<Exercise>();
    }

    /**
     * Creates a workout given another workout, other.
     * @param other - another workout
     */
    public Workout(Workout other)
    {
        this.name = other.name;
        this.description = other.description;

        for(Exercise exercise : other.exercises)
        {
            // inefficient code, fix it later :)
            Exercise e;

            if(exercise instanceof WeightedRepExercise)
            {
                e = new WeightedRepExercise((WeightedRepExercise) exercise);
            }
            else if(exercise instanceof RepExercise)
            {
                e = new RepExercise((RepExercise) exercise);
            }
            else if(exercise instanceof TimedExercise)
            {
                e = new TimedExercise((TimedExercise) exercise);
            }
            else
            {
                // ignore this for now, it's a workaround. We will have an entirely different approach later.
                e = new RepExercise("Empty Exercise");
            }

            this.exercises.add(e);
        }
    }

    /**
     * A getter method
     * returns the name of the workout
     * @return the string name
     */

    public String getName(){
        return name;
    }

    /**
     * Change the workouts name
     * @param  name
     */

    public void setName(String name) {
        this.name = name;
    }

    /**
     * returns when the workout is started
     * @return the LocalDateTime for the start time
     */
    public LocalDateTime getStartTime(){
        return startTime;
    }

    /**
     * Change the start time of the workout
     * @param  startTime
     */

    public void setStartTime(LocalDateTime startTime) {
        this.startTime = startTime;
    }

    /**
     * returns when the workout has ended
     * @return the LocalDateTime for the end time
     */

    public LocalDateTime getEndTime(){
        return endTime;
    }

    /**
     * Change the end time of the workout
     * @param  endTime
     */

    public void setEndTime(LocalDateTime endTime) {
        this.endTime = endTime;
    }

    /**
     * returns the description of the workout
     * @return the String for the description
     */

    public String getDescription(){
        return description;
    }

    /**
     * Change the workouts description
     * @param  description
     */

    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * A method used to add exercises
     * @param exercise
     */

    public void addExercise(Exercise exercise)
    {
        this.exercises.add(exercise);
    }

    /**
     *
     * @return The volume generated by all exercises performed in this workout
     */

    public double getTotalVolume()
    {
        double volume = 0;

        for(Exercise exercise : this.exercises)
        {
            volume += exercise.getVolume();
        }

        return volume;
    }

    /**
     * A workout's duration is defined to be the total time elapsed between the start and end of the workout.
     * @return The workout's duration
     */
    public Duration getDuration()
    {
        return Duration.between(this.startTime, this.endTime);
    }



}

